from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import permissions
from newrelic.models import api_key, rest_url
from newrelic.serializers import api_keySerializer, rest_urlSerializer

@api_view(['GET', 'POST'])
@permission_classes((permissions.AllowAny,))
def api_key_list(request, format=None):
    if request.method == 'GET':
        api_keys = api_key.objects.all()
        serializer = api_keySerializer(api_keys, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        serializer = api_keySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
@permission_classes((permissions.AllowAny,))
def api_key_detail(request, pk, format=None):
    try:
        apikey = api_key.objects.get(pk=pk)
    except apikey.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = api_keySerializer(apikey)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = api_keySerializer(apikey, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        apikey.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
